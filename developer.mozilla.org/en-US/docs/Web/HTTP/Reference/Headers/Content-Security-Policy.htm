<!DOCTYPE html><html lang="en-US" prefix="og: https://ogp.me/ns#"><head><meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1"><link rel="shortcut icon" href="https://developer.mozilla.org/favicon.ico"><link rel="alternate icon" type="image/svg+xml" href="https://developer.mozilla.org/favicon.svg"><link rel="apple-touch-icon" href="https://developer.mozilla.org/apple-touch-icon.528534bba673c38049c2.png"><meta name="theme-color" content="#ffffff"><link rel="manifest" href="https://developer.mozilla.org/manifest.f42880861b394dd4dc9b.json"><link rel="search" type="application/opensearchdescription+xml" href="/opensearch.xml" title="MDN Web Docs"><title>Content-Security-Policy (CSP) header</title><link rel="alternate" title="Content-Security-Policy (CSP) header" href="https://developer.mozilla.org/de/docs/Web/HTTP/Reference/Headers/Content-Security-Policy" hreflang="de"><link rel="alternate" title="Content-Security-Policy" href="https://developer.mozilla.org/es/docs/Web/HTTP/Reference/Headers/Content-Security-Policy" hreflang="es"><link rel="alternate" title="Politique de sécurité de contenu" href="https://developer.mozilla.org/fr/docs/Web/HTTP/Reference/Headers/Content-Security-Policy" hreflang="fr"><link rel="alternate" title="Content-Security-Policy (CSP)" href="https://developer.mozilla.org/ja/docs/Web/HTTP/Reference/Headers/Content-Security-Policy" hreflang="ja"><link rel="alternate" title="Content-Security-Policy" href="https://developer.mozilla.org/pt-BR/docs/Web/HTTP/Reference/Headers/Content-Security-Policy" hreflang="pt"><link rel="alternate" title="Content-Security-Policy (CSP)" href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Reference/Headers/Content-Security-Policy" hreflang="zh"><link rel="alternate" title="Content-Security-Policy (CSP) header" href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Content-Security-Policy" hreflang="en"><link rel="preload" as="font" type="font/woff2" href="/static/media/Inter.var.c2fe3cb2b7c746f7966a.woff2" crossorigin=""><link rel="alternate" type="application/rss+xml" title="MDN Blog RSS Feed" href="https://developer.mozilla.org/en-US/blog/rss.xml"><meta name="description" content="The HTTP Content-Security-Policy response header allows website administrators to control resources the user agent is allowed to load for a given page. With a few exceptions, policies mostly involve specifying server origins and script endpoints.
This helps guard against cross-site scripting attacks."><meta property="og:url" content="https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Content-Security-Policy"><meta property="og:title" content="Content-Security-Policy (CSP) header - HTTP | MDN"><meta property="og:type" content="website"><meta property="og:locale" content="en_US"><meta property="og:description" content="The HTTP Content-Security-Policy response header allows website administrators to control resources the user agent is allowed to load for a given page. With a few exceptions, policies mostly involve specifying server origins and script endpoints.
This helps guard against cross-site scripting attacks."><meta property="og:image" content="https://developer.mozilla.org/mdn-social-share.d893525a4fb5fb1f67a2.png"><meta property="og:image:type" content="image/png"><meta property="og:image:height" content="1080"><meta property="og:image:width" content="1920"><meta property="og:image:alt" content="The MDN Web Docs logo, featuring a blue accent color, displayed on a solid black background."><meta property="og:site_name" content="MDN Web Docs"><meta name="twitter:card" content="summary_large_image"><meta name="twitter:creator" content="MozDevNet"><link rel="canonical" href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Content-Security-Policy"><style media="print">.article-actions-container,.document-toc-container,.language-menu,.main-menu-toggle,.on-github,.page-footer,.place,.sidebar,.top-banner,.top-navigation-main,ul.prev-next{display:none!important}.main-page-content,.main-page-content pre{padding:2px}.main-page-content pre{border-left-width:2px}</style></head><body><div id="root"><div class="page-wrapper  category-http document-page"><div class="main-wrapper"><main id="content" class="main-content  "><article class="main-page-content" lang="en-US"><header><h1>Content-Security-Policy (CSP) header</h1><details class="baseline-indicator high"><summary><span class="indicator" role="img" aria-label="Baseline Check"></span><div class="status-title">Baseline<!-- --> <span class="not-bold">Widely available</span> *</div><div class="browsers"><span class="engine" title="Supported in Chrome and Edge"><span class="browser chrome supported" role="img" aria-label="Chrome check"></span><span class="browser edge supported" role="img" aria-label="Edge check"></span></span><span class="engine" title="Supported in Firefox"><span class="browser firefox supported" role="img" aria-label="Firefox check"></span></span><span class="engine" title="Supported in Safari"><span class="browser safari supported" role="img" aria-label="Safari check"></span></span></div><span class="icon icon-chevron "></span></summary><div class="extra"><p>This feature is well established and works across many devices and browser versions. It’s been available across browsers since<!-- --> <!-- -->August 2016<!-- -->.</p><p>* Some parts of this feature may have varying levels of support.</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Glossary/Baseline/Compatibility" data-glean="baseline_link_learn_more" target="_blank" class="learn-more">Learn more</a></li><li><a href="#browser_compatibility" data-glean="baseline_link_bcd_table">See full compatibility</a></li><li><a href="https://survey.alchemer.com/s3/7634825/MDN-baseline-feedback?page=%2Fen-US%2Fdocs%2FWeb%2FHTTP%2FReference%2FHeaders%2FContent-Security-Policy&amp;level=high" data-glean="baseline_link_feedback" class="feedback-link" target="_blank" rel="noreferrer">Report feedback</a></li></ul></div></details></header><div class="section-content"><p>The HTTP <strong><code>Content-Security-Policy</code></strong> response header allows website administrators to control resources the user agent is allowed to load for a given page. With a few exceptions, policies mostly involve specifying server origins and script endpoints.
This helps guard against <a href="https://developer.mozilla.org/en-US/docs/Glossary/Cross-site_scripting">cross-site scripting</a> attacks.</p>
<p>See the <a href="/en-US/docs/Web/HTTP/Guides/CSP">Content Security Policy (CSP)</a> guide for details about how a CSP is delivered to the browser, what it looks like, along with use cases and deployment strategies.</p>
<figure class="table-container"><table class="properties">
  <tbody>
    <tr>
      <th scope="row">Header type</th>
      <td><a href="https://developer.mozilla.org/en-US/docs/Glossary/Response_header">Response header</a></td>
    </tr>
    <tr>
      <th scope="row"><a href="https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_request_header">Forbidden request header</a></th>
      <td>no</td>
    </tr>
  </tbody>
</table></figure></div><section aria-labelledby="syntax"><h2 id="syntax"><a href="#syntax">Syntax</a></h2><div class="section-content"><div class="code-example"><div class="example-header"><span class="language-name">http</span></div><pre class="brush: http notranslate"><code>Content-Security-Policy: &lt;policy-directive&gt;; &lt;policy-directive&gt;
</code></pre></div>
<p>where <code>&lt;policy-directive&gt;</code> consists of:
<code>&lt;directive&gt; &lt;value&gt;</code> with no internal punctuation.</p></div></section><section aria-labelledby="directives"><h2 id="directives"><a href="#directives">Directives</a></h2><div class="section-content"></div></section><section aria-labelledby="fetch_directives"><h3 id="fetch_directives"><a href="#fetch_directives">Fetch directives</a></h3><div class="section-content"><p>Fetch directives control the locations from which certain resource types may be loaded.</p>
<dl>
<dt id="child-src"><a href="Content-Security-Policy/child-src.htm"><code>child-src</code></a></dt>
<dd>
<p>Defines the valid sources for <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API">web workers</a> and nested browsing contexts loaded using elements such as
<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/frame"><code>&lt;frame&gt;</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/iframe"><code>&lt;iframe&gt;</code></a>.</p>
<p><a href="#fallbacks">Fallback</a> for <code>frame-src</code> and <code>worker-src</code>.</p>
</dd>
<dt id="connect-src"><a href="Content-Security-Policy/connect-src.htm"><code>connect-src</code></a></dt>
<dd>
<p>Restricts the URLs which can be loaded using script interfaces.</p>
</dd>
<dt id="default-src"><a href="Content-Security-Policy/default-src.htm"><code>default-src</code></a></dt>
<dd>
<p>Serves as a fallback for the other <a href="https://developer.mozilla.org/en-US/docs/Glossary/Fetch_directive">fetch directives</a>.</p>
<p><a href="#fallbacks">Fallback</a> for all other fetch directives.</p>
</dd>
<dt id="fenced-frame-src"><a href="Content-Security-Policy/fenced-frame-src.htm"><code>fenced-frame-src</code></a> <abbr class="icon icon-experimental" title="Experimental. Expect behavior to change in the future.">
<span class="visually-hidden">Experimental</span>
</abbr></dt>
<dd>
<p>Specifies valid sources for nested browsing contexts loaded into <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/fencedframe"><code>&lt;fencedframe&gt;</code></a> elements.</p>
</dd>
<dt id="font-src"><a href="Content-Security-Policy/font-src.htm"><code>font-src</code></a></dt>
<dd>
<p>Specifies valid sources for fonts loaded using <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face"><code>@font-face</code></a>.</p>
</dd>
<dt id="frame-src"><a href="Content-Security-Policy/frame-src.htm"><code>frame-src</code></a></dt>
<dd>
<p>Specifies valid sources for nested browsing contexts loaded into elements such as
<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/frame"><code>&lt;frame&gt;</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/iframe"><code>&lt;iframe&gt;</code></a>.</p>
</dd>
<dt id="img-src"><a href="Content-Security-Policy/img-src.htm"><code>img-src</code></a></dt>
<dd>
<p>Specifies valid sources of images and favicons.</p>
</dd>
<dt id="manifest-src"><a href="Content-Security-Policy/manifest-src.htm"><code>manifest-src</code></a></dt>
<dd>
<p>Specifies valid sources of application manifest files.</p>
</dd>
<dt id="media-src"><a href="Content-Security-Policy/media-src.htm"><code>media-src</code></a></dt>
<dd>
<p>Specifies valid sources for loading media using the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/audio"><code>&lt;audio&gt;</code></a>,
<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/video"><code>&lt;video&gt;</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/track"><code>&lt;track&gt;</code></a> elements.</p>
</dd>
<dt id="object-src"><a href="Content-Security-Policy/object-src.htm"><code>object-src</code></a></dt>
<dd>
<p>Specifies valid sources for the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/object"><code>&lt;object&gt;</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/embed"><code>&lt;embed&gt;</code></a> elements.</p>
</dd>
<dt id="prefetch-src"><a href="Content-Security-Policy/prefetch-src.htm"><code>prefetch-src</code></a> <abbr class="icon icon-deprecated" title="Deprecated. Not for use in new websites.">
<span class="visually-hidden">Deprecated</span>
</abbr> <abbr class="icon icon-nonstandard" title="Non-standard. Check cross-browser support before using.">
<span class="visually-hidden">Non-standard</span>
</abbr></dt>
<dd>
<p>Specifies valid sources to be prefetched or prerendered.</p>
</dd>
<dt id="script-src"><a href="Content-Security-Policy/script-src.htm"><code>script-src</code></a></dt>
<dd>
<p>Specifies valid sources for JavaScript and WebAssembly resources.</p>
<p><a href="#fallbacks">Fallback</a> for <code>script-src-elem</code> and <code>script-src-attr</code>.</p>
</dd>
<dt id="script-src-elem"><a href="Content-Security-Policy/script-src-elem.htm"><code>script-src-elem</code></a></dt>
<dd>
<p>Specifies valid sources for JavaScript <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/script"><code>&lt;script&gt;</code></a> elements.</p>
</dd>
<dt id="script-src-attr"><a href="Content-Security-Policy/script-src-attr.htm"><code>script-src-attr</code></a></dt>
<dd>
<p>Specifies valid sources for JavaScript inline event handlers.</p>
</dd>
<dt id="style-src"><a href="Content-Security-Policy/style-src.htm"><code>style-src</code></a></dt>
<dd>
<p>Specifies valid sources for stylesheets.</p>
<p><a href="#fallbacks">Fallback</a> for <code>style-src-elem</code> and <code>style-src-attr</code>.</p>
</dd>
<dt id="style-src-elem"><a href="Content-Security-Policy/style-src-elem.htm"><code>style-src-elem</code></a></dt>
<dd>
<p>Specifies valid sources for stylesheets <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/style"><code>&lt;style&gt;</code></a> elements and
<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/link"><code>&lt;link&gt;</code></a> elements with <code>rel="stylesheet"</code>.</p>
</dd>
<dt id="style-src-attr"><a href="Content-Security-Policy/style-src-attr.htm"><code>style-src-attr</code></a></dt>
<dd>
<p>Specifies valid sources for inline styles applied to individual DOM elements.</p>
</dd>
<dt id="worker-src"><a href="Content-Security-Policy/worker-src.htm"><code>worker-src</code></a></dt>
<dd>
<p>Specifies valid sources for <a href="https://developer.mozilla.org/en-US/docs/Web/API/Worker"><code>Worker</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker"><code>SharedWorker</code></a>, or
<a href="https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker"><code>ServiceWorker</code></a> scripts.</p>
</dd>
</dl>
<p>All fetch directives may be specified the single value <code>'none'</code>, indicating that the specific resource type should be completely blocked, or as one or more <em>source expression</em> values, indicating valid sources for that resource type. See <a href="#fetch_directive_syntax">Fetch directive syntax</a> for more details.</p>
<h4 id="fallbacks">Fallbacks</h4>
<p>Some fetch directives function as fallbacks for other more granular directives. This means that if the more granular directive is not specified, then the fallback is used to provide a policy for that resource type.</p>
<ul>
<li><code>default-src</code> is a fallback for all other fetch directives.</li>
<li><code>script-src</code> is a fallback for <code>script-src-attr</code> and <code>script-src-elem</code>.</li>
<li><code>style-src</code> is a fallback for <code>style-src-attr</code> and <code>style-src-elem</code>.</li>
<li><code>child-src</code> is a fallback for <code>frame-src</code> and <code>worker-src</code>.</li>
</ul>
<p>For example:</p>
<ul>
<li>If <code>img-src</code> is omitted but <code>default-src</code> is included, then the policy defined by <code>default-src</code> will be applied to images.</li>
<li>If <code>script-src-elem</code> is omitted but <code>script-src</code> is included, then the policy defined by <code>script-src</code> will be applied to <code>&lt;script&gt;</code> elements.</li>
<li>If <code>script-src-elem</code> and <code>script-src</code> are both omitted, but <code>default-src</code> is included, then the policy defined by <code>default-src</code> will be applied to <code>&lt;script&gt;</code> elements.</li>
</ul></div></section><section aria-labelledby="document_directives"><h3 id="document_directives"><a href="#document_directives">Document directives</a></h3><div class="section-content"><p>Document directives govern the properties of a document or <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API">worker</a> environment to which a policy
applies.</p>
<dl>
<dt id="base-uri"><a href="Content-Security-Policy/base-uri.htm"><code>base-uri</code></a></dt>
<dd>
<p>Restricts the URLs which can be used in a document's <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/base"><code>&lt;base&gt;</code></a>
element.</p>
</dd>
<dt id="sandbox"><a href="Content-Security-Policy/sandbox.htm"><code>sandbox</code></a></dt>
<dd>
<p>Enables a sandbox for the requested resource similar to the
<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/iframe"><code>&lt;iframe&gt;</code></a> <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/iframe#sandbox"><code>sandbox</code></a> attribute.</p>
</dd>
</dl></div></section><section aria-labelledby="navigation_directives"><h3 id="navigation_directives"><a href="#navigation_directives">Navigation directives</a></h3><div class="section-content"><p>Navigation directives govern to which locations a user can navigate or submit a form,
for example.</p>
<dl>
<dt id="form-action"><a href="Content-Security-Policy/form-action.htm"><code>form-action</code></a></dt>
<dd>
<p>Restricts the URLs which can be used as the target of a form submissions from a
given context.</p>
</dd>
<dt id="frame-ancestors"><a href="Content-Security-Policy/frame-ancestors.htm"><code>frame-ancestors</code></a></dt>
<dd>
<p>Specifies valid parents that may embed a page using <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/frame"><code>&lt;frame&gt;</code></a>,
<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/iframe"><code>&lt;iframe&gt;</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/object"><code>&lt;object&gt;</code></a>, or <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/embed"><code>&lt;embed&gt;</code></a>.</p>
</dd>
</dl></div></section><section aria-labelledby="reporting_directives"><h3 id="reporting_directives"><a href="#reporting_directives">Reporting directives</a></h3><div class="section-content"><p>Reporting directives control the destination URL for CSP violation reports in <code>Content-Security-Policy</code> and <a href="Content-Security-Policy-Report-Only.htm"><code>Content-Security-Policy-Report-Only</code></a>.</p>
<dl>
<dt id="report-to"><a href="Content-Security-Policy/report-to.htm"><code>report-to</code></a></dt>
<dd>
<p>Provides the browser with a token identifying the reporting endpoint or group of endpoints to send CSP violation information to.
The endpoints that the token represents are provided through other HTTP headers, such as <a href="Reporting-Endpoints.htm"><code>Reporting-Endpoints</code></a> and <a href="Report-To.htm"><code>Report-To</code></a> <abbr class="icon icon-deprecated" title="Deprecated. Not for use in new websites.">
<span class="visually-hidden">Deprecated</span>
</abbr>.</p>
<div class="notecard warning">
<p><strong>Warning:</strong>
This directive is intended to replace <a href="Content-Security-Policy/report-uri.htm"><code>report-uri</code></a>; in browsers that support <code>report-to</code>, the <code>report-uri</code> directive is ignored.
However until <code>report-to</code> is broadly supported you should specify both headers as shown (where <code>endpoint_name</code> is the name of a separately provided endpoint):</p>
<div class="code-example"><div class="example-header"><span class="language-name">http</span></div><pre class="brush: http notranslate"><code>Content-Security-Policy: …; report-uri https://endpoint.example.com; report-to endpoint_name
</code></pre></div>
</div>
</dd>
</dl></div></section><section aria-labelledby="other_directives"><h3 id="other_directives"><a href="#other_directives">Other directives</a></h3><div class="section-content"><dl>
<dt id="require-trusted-types-for"><a href="Content-Security-Policy/require-trusted-types-for.htm"><code>require-trusted-types-for</code></a></dt>
<dd>
<p>Enforces <a href="https://developer.mozilla.org/en-US/docs/Web/API/Trusted_Types_API">Trusted Types</a> at the DOM XSS injection sinks.</p>
</dd>
<dt id="trusted-types"><a href="Content-Security-Policy/trusted-types.htm"><code>trusted-types</code></a></dt>
<dd>
<p>Used to specify an allowlist of <a href="https://developer.mozilla.org/en-US/docs/Web/API/Trusted_Types_API">Trusted Types</a> policies.
Trusted Types allows applications to lock down DOM XSS injection sinks to only accept non-spoofable, typed values in place of strings.</p>
</dd>
<dt id="upgrade-insecure-requests"><a href="Content-Security-Policy/upgrade-insecure-requests.htm"><code>upgrade-insecure-requests</code></a></dt>
<dd>
<p>Instructs user agents to treat all of a site's insecure URLs (those served over
HTTP) as though they have been replaced with secure URLs (those served over HTTPS).
This directive is intended for websites with large numbers of insecure legacy URLs
that need to be rewritten.</p>
</dd>
</dl></div></section><section aria-labelledby="deprecated_directives"><h3 id="deprecated_directives"><a href="#deprecated_directives">Deprecated directives</a></h3><div class="section-content"><dl>
<dt id="block-all-mixed-content"><a href="Content-Security-Policy/block-all-mixed-content.htm"><code>block-all-mixed-content</code></a> <abbr class="icon icon-deprecated" title="Deprecated. Not for use in new websites.">
<span class="visually-hidden">Deprecated</span>
</abbr></dt>
<dd>
<p>Prevents loading any assets using HTTP when the page is loaded using HTTPS.</p>
</dd>
<dt id="report-uri"><a href="Content-Security-Policy/report-uri.htm"><code>report-uri</code></a> <abbr class="icon icon-deprecated" title="Deprecated. Not for use in new websites.">
<span class="visually-hidden">Deprecated</span>
</abbr></dt>
<dd>
<p>Provides the browser with a URL where CSP violation reports should be sent.
This has been superseded by the <a href="Content-Security-Policy/report-to.htm"><code>report-to</code></a> directive.</p>
</dd>
</dl></div></section><section aria-labelledby="fetch_directive_syntax"><h2 id="fetch_directive_syntax"><a href="#fetch_directive_syntax">Fetch directive syntax</a></h2><div class="section-content"><p>All fetch directives may be specified as one of the following:</p>
<ul>
<li>the single value <code>'none'</code>, indicating that the specific resource type should be completely blocked</li>
<li>one or more <em>source expression</em> values, indicating valid sources for that resource type.</li>
</ul>
<p>Each source expression takes one of the forms listed below. Note that not all forms are applicable to all fetch directives: see the documentation for each fetch directive to find out which forms are applicable to it.</p>
<p>The <code>&lt;host-source&gt;</code> and <code>&lt;scheme-source&gt;</code> formats must be unquoted, and all other formats must be enclosed in single quotes.</p></div></section><section aria-labelledby="nonce-nonce_value"><h3 id="nonce-nonce_value"><a href="#nonce-nonce_value">'nonce-&lt;nonce_value&gt;'</a></h3><div class="section-content"><p>This value consists of the string <code>nonce-</code> followed by a nonce value. The nonce value may use any of the characters from <a href="https://developer.mozilla.org/en-US/docs/Glossary/Base64#base64_characters">Base64</a> or <a href="https://developer.mozilla.org/en-US/docs/Glossary/Base64#url_and_filename_safe_base64">URL-safe Base64</a>.</p>
<p>This string is a random value that the server generates for every HTTP response. For example:</p>
<pre class="brush: plain notranslate">'nonce-416d1177-4d12-4e3b-b7c9-f6c409789fb8'
</pre>
<p>The server can then include the same value as the value of the <code>nonce</code> attribute of any <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/script"><code>&lt;script&gt;</code></a> or <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/style"><code>&lt;style&gt;</code></a> resources that they intend to load from the document.</p>
<p>The browser compares the value from the CSP directive against the value in the element attribute, and loads the resource only if they match.</p>
<p>If a directive contains a nonce and <code>unsafe-inline</code>, then the browser ignores <code>unsafe-inline</code>.</p>
<p>See <a href="/en-US/docs/Web/HTTP/Guides/CSP#nonces">Nonces</a> in the CSP guide for more usage information.</p>
<div class="notecard note">
<p><strong>Note:</strong>
Nonce source expressions are only applicable to <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/script"><code>&lt;script&gt;</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/style"><code>&lt;style&gt;</code></a> elements.</p>
</div></div></section><section aria-labelledby="hash_algorithm-hash_value"><h3 id="hash_algorithm-hash_value"><a href="#hash_algorithm-hash_value">'&lt;hash_algorithm&gt;-&lt;hash_value&gt;'</a></h3><div class="section-content"><p>This value consists of a string identifying a hash algorithm, followed by <code>-</code>, followed by a hash value. The hash value may use any of the characters from <a href="https://developer.mozilla.org/en-US/docs/Glossary/Base64#base64_characters">Base64</a> or <a href="https://developer.mozilla.org/en-US/docs/Glossary/Base64#url_and_filename_safe_base64">URL-safe Base64</a>.</p>
<ul>
<li>The hash algorithm identifier must be one of <code>sha256</code>, <code>sha384</code>, or <code>sha512</code>.</li>
<li>The hash value is the base64-encoded <a href="https://developer.mozilla.org/en-US/docs/Glossary/Hash_function">hash</a> of a <code>&lt;script&gt;</code> or <code>&lt;style&gt;</code> resource, calculated using one of the following hash functions: SHA-256, SHA-384, or SHA-512.</li>
</ul>
<p>For example:</p>
<pre class="brush: plain notranslate">'sha256-cd9827ad...'
</pre>
<p>When the browser receives the document, it hashes the contents of any <code>&lt;script&gt;</code> and <code>&lt;style&gt;</code> elements, compares the result with any hashes in the CSP directive, and loads the resource only if there is a match.</p>
<p>If the element loads an external resource (for example, using the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/script#src"><code>src</code></a> attribute), then the element must also have the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/script#integrity"><code>integrity</code></a> attribute set.</p>
<p>If a directive contains a hash and <code>unsafe-inline</code>, then the browser ignores <code>unsafe-inline</code>.</p>
<p>See <a href="/en-US/docs/Web/HTTP/Guides/CSP#hashes">Hashes</a> in the CSP guide for more usage information.</p>
<div class="notecard note">
<p><strong>Note:</strong>
Hash source expressions are only applicable to <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/script"><code>&lt;script&gt;</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/style"><code>&lt;style&gt;</code></a> elements.</p>
</div></div></section><section aria-labelledby="host-source"><h3 id="host-source"><a href="#host-source">&lt;host-source&gt;</a></h3><div class="section-content"><p>The <a href="https://developer.mozilla.org/en-US/docs/Web/URI">URL</a> or IP address of a <a href="https://developer.mozilla.org/en-US/docs/Glossary/Host">host</a> that is a valid source for the resource.</p>
<p>The scheme, port number, and path are optional.</p>
<p>If the scheme is omitted, the scheme of the document's origin is used.</p>
<p>When matching schemes, secure upgrades are allowed. For example:</p>
<ul>
<li><code>http://example.com</code> will also permit resources from <code>https://example.com</code></li>
<li><code>ws://example.org</code> will also permit resources from <code>wss://example.org</code>.</li>
</ul>
<p>Wildcards (<code>'*'</code>) can be used for subdomains, host address, and port number, indicating that all legal values of each are valid. For example:</p>
<ul>
<li><code>http://*.example.com</code> permits resources from any subdomain of <code>example.com</code>, over HTTP or HTTPS.</li>
</ul>
<p>Paths that end in <code>/</code> match any path they are a prefix of. For example:</p>
<ul>
<li><code>example.com/api/</code> will permit resources from <code>example.com/api/users/new</code>.</li>
</ul>
<p>Paths that do not end in <code>/</code> are matched exactly. For example:</p>
<ul>
<li><code>https://example.com/file.js</code> permits resources from <code>https://example.com/file.js</code> but not <code>https://example.com/file.js/file2.js</code>.</li>
</ul></div></section><section aria-labelledby="scheme-source"><h3 id="scheme-source"><a href="#scheme-source">&lt;scheme-source&gt;</a></h3><div class="section-content"><p>A <a href="https://developer.mozilla.org/en-US/docs/Web/URI/Reference/Schemes">scheme</a>, such as <code>https:</code>. The colon is required.</p>
<p>Secure upgrades are allowed, so:</p>
<ul>
<li><code>http:</code> will also permit resources loaded using HTTPS</li>
<li><code>ws:</code> will also permit resources loaded using WSS.</li>
</ul></div></section><section aria-labelledby="self"><h3 id="self"><a href="#self">'self'</a></h3><div class="section-content"><p>Resources of the given type may only be loaded from the same <a href="https://developer.mozilla.org/en-US/docs/Glossary/Origin">origin</a> as the document.</p>
<p>Secure upgrades are allowed. For example:</p>
<ul>
<li>If the document is served from <code>http://example.com</code>, then a CSP of <code>'self'</code> will also permit resources from <code>https://example.com</code>.</li>
<li>If the document is served from <code>ws://example.org</code>, then a CSP of <code>'self'</code> will also permit resources from <code>wss://example.org</code>.</li>
</ul></div></section><section aria-labelledby="unsafe-eval"><h3 id="unsafe-eval"><a href="#unsafe-eval">'unsafe-eval'</a></h3><div class="section-content"><p>By default, if a CSP contains a <code>default-src</code> or a <code>script-src</code> directive, then JavaScript functions which evaluate their arguments as JavaScript are disabled. This includes <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval"><code>eval()</code></a>, the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout#code"><code>code</code></a> argument to <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout" title="setTimeout()"><code>setTimeout()</code></a>, or the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Function"><code>Function()</code></a> constructor.</p>
<p>The <code>unsafe-eval</code> keyword can be used to undo this protection, allowing dynamic evaluation of strings as JavaScript.</p>
<div class="notecard warning">
<p><strong>Warning:</strong>
Developers should avoid <code>'unsafe-eval'</code>, because it defeats much of the purpose of having a CSP.</p>
</div>
<p>See <a href="/en-US/docs/Web/HTTP/Guides/CSP#eval_and_similar_apis"><code>eval()</code> and similar APIs</a> in the CSP guide for more usage information.</p></div></section><section aria-labelledby="wasm-unsafe-eval"><h3 id="wasm-unsafe-eval"><a href="#wasm-unsafe-eval">'wasm-unsafe-eval'</a></h3><div class="section-content"><p>By default, if a CSP contains a <code>default-src</code> or a <code>script-src</code> directive, then a page won't be allowed to compile WebAssembly using functions like <a href="https://developer.mozilla.org/en-US/docs/WebAssembly/Reference/JavaScript_interface/compileStreaming_static"><code>WebAssembly.compileStreaming()</code></a>.</p>
<p>The <code>wasm-unsafe-eval</code> keyword can be used to undo this protection. This is a much safer alternative to <code>'unsafe-eval'</code>, since it does not enable general evaluation of JavaScript.</p></div></section><section aria-labelledby="unsafe-inline"><h3 id="unsafe-inline"><a href="#unsafe-inline">'unsafe-inline'</a></h3><div class="section-content"><p>By default, if a CSP contains a <code>default-src</code> or a <code>script-src</code> directive, then inline JavaScript is not allowed to execute. This includes:</p>
<ul>
<li>inline <code>&lt;script&gt;</code> tags</li>
<li>inline event handler attributes</li>
<li><code>javascript:</code> URLs.</li>
</ul>
<p>Similarly, if a CSP contains <code>default-src</code> or a <code>style-src</code> directive, then inline CSS will not be loaded, including:</p>
<ul>
<li>inline <code>&lt;style&gt;</code> tags</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style" title="style"><code>style</code></a> attributes.</li>
</ul>
<p>The <code>unsafe-inline</code> keyword can be used to undo this protection, allowing all these forms to be loaded.</p>
<div class="notecard warning">
<p><strong>Warning:</strong>
Developers should avoid <code>'unsafe-inline'</code>, because it defeats much of the purpose of having a CSP.</p>
</div>
<p>See <a href="/en-US/docs/Web/HTTP/Guides/CSP#inline_javascript">Inline JavaScript</a> in the CSP guide for more usage information.</p></div></section><section aria-labelledby="unsafe-hashes"><h3 id="unsafe-hashes"><a href="#unsafe-hashes">'unsafe-hashes'</a></h3><div class="section-content"><p>By default, if a CSP contains a <code>default-src</code> or a <code>script-src</code> directive, then inline event handler attributes like <code>onclick</code> and inline <code>style</code> attributes are not allowed to execute.</p>
<p>The <code>'unsafe-hashes'</code> expression allows the browser to use <a href="#hash_algorithm-hash_value">hash expressions</a> for inline event handlers and <code>style</code> attributes. For example, a CSP might contain a directive like this:</p>
<div class="code-example"><div class="example-header"><span class="language-name">http</span></div><pre class="brush: http notranslate"><code>script-src 'unsafe-hashes' 'sha256-cd9827ad...'
</code></pre></div>
<p>If the hash value matches the hash of an inline event handler attribute value or of a <code>style</code> attribute value, then the code will be allowed to execute.</p>
<div class="notecard warning">
<p><strong>Warning:</strong>
The <code>'unsafe-hashes'</code> value is unsafe.</p>
<p>In particular, it enables an attack in which the content of the inline event handler attribute is injected into the document as an inline <code>&lt;script&gt;</code> element. Suppose the inline event handler is:</p>
<div class="code-example"><div class="example-header"><span class="language-name">html</span></div><pre class="brush: html notranslate"><code>&lt;button onclick="transferAllMyMoney()"&gt;Transfer all my money&lt;/button&gt;
</code></pre></div>
<p>If an attacker can inject an inline <code>&lt;script&gt;</code> element containing this code, the CSP will allow it to execute automatically.</p>
<p>However, <code>'unsafe-hashes'</code> is much safer than <code>'unsafe-inline'</code>.</p>
</div></div></section><section aria-labelledby="inline-speculation-rules"><h3 id="inline-speculation-rules"><a href="#inline-speculation-rules">'inline-speculation-rules'</a></h3><div class="section-content"><p>By default, if a CSP contains a <code>default-src</code> or a <code>script-src</code> directive, then inline JavaScript is not allowed to execute. The <code>'inline-speculation-rules'</code> allows the browser to load inline <code>&lt;script&gt;</code> elements that have a <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/script/type"><code>type</code></a> attribute of <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/script/type/speculationrules"><code>speculationrules</code></a>.</p>
<p>See the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Speculation_Rules_API">Speculation Rules API</a> for more information.</p></div></section><section aria-labelledby="strict-dynamic"><h3 id="strict-dynamic"><a href="#strict-dynamic">'strict-dynamic'</a></h3><div class="section-content"><p>The <code>'strict-dynamic'</code> keyword makes the trust conferred on a script by a <a href="#nonce-nonce_value">nonce</a> or a <a href="#hash_algorithm-hash_value">hash</a> extend to scripts that this script dynamically loads, for example by creating new <code>&lt;script&gt;</code> tags using <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement"><code>Document.createElement()</code></a> and then inserting them into the document using <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild"><code>Node.appendChild()</code></a>.</p>
<p>If this keyword is present in a directive, then the following source expression values are all ignored:</p>
<ul>
<li><a href="#host-source">&lt;host-source&gt;</a></li>
<li><a href="#scheme-source">&lt;scheme-source&gt;</a></li>
<li><a href="#self"><code>'self'</code></a></li>
<li><a href="#unsafe-inline"><code>'unsafe-inline'</code></a></li>
</ul>
<p>See <a href="/en-US/docs/Web/HTTP/Guides/CSP#the_strict-dynamic_keyword">The <code>strict-dynamic</code> keyword</a> in the CSP guide for more usage information.</p></div></section><section aria-labelledby="report-sample"><h3 id="report-sample"><a href="#report-sample">'report-sample'</a></h3><div class="section-content"><p>If this expression is included in a directive controlling scripts or styles, and the directive causes the browser to block any inline scripts, inline styles, or event handler attributes, then the <a href="/en-US/docs/Web/HTTP/Guides/CSP#violation_reporting">violation report</a> that the browser generates will contain a <a href="https://developer.mozilla.org/en-US/docs/Web/API/CSPViolationReportBody/sample" title="sample"><code>sample</code></a> property containing the first 40 characters of the blocked resource.</p></div></section><section aria-labelledby="csp_in_workers"><h2 id="csp_in_workers"><a href="#csp_in_workers">CSP in workers</a></h2><div class="section-content"><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Worker">Workers</a> are in general <em>not</em> governed
by the content security policy of the document (or parent worker) that created them. To
specify a content security policy for the worker, set a
<code>Content-Security-Policy</code> response header for the request which requested the
worker script itself.</p>
<p>The exception to this is if the worker script's origin is a globally unique identifier
(for example, if its URL has a scheme of data or blob). In this case, the worker does
inherit the content security policy of the document or worker that created it.</p></div></section><section aria-labelledby="multiple_content_security_policies"><h2 id="multiple_content_security_policies"><a href="#multiple_content_security_policies">Multiple content security policies</a></h2><div class="section-content"><p>The CSP mechanism allows multiple policies being specified for a resource, including
via the <code>Content-Security-Policy</code> header, the
<a href="Content-Security-Policy-Report-Only.htm"><code>Content-Security-Policy-Report-Only</code></a> header and a
<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/meta"><code>&lt;meta&gt;</code></a> element.</p>
<p>You can use the <code>Content-Security-Policy</code> header more than once, as in the
example below. Pay special attention to the <a href="Content-Security-Policy/connect-src.htm"><code>connect-src</code></a> directive here. Even
though the second policy would allow the connection, the first policy contains
<code>connect-src 'none'</code>. Adding additional policies <em>can only further
restrict</em> the capabilities of the protected resource, which means that there will
be no connection allowed and, as the strictest policy, <code>connect-src 'none'</code>
is enforced.</p>
<div class="code-example"><div class="example-header"><span class="language-name">http</span></div><pre class="brush: http notranslate"><code>Content-Security-Policy: default-src 'self' http://example.com;
                          connect-src 'none';
Content-Security-Policy: connect-src http://example.com/;
                          script-src http://example.com/
</code></pre></div></div></section><section aria-labelledby="examples"><h2 id="examples"><a href="#examples">Examples</a></h2><div class="section-content"></div></section><section aria-labelledby="disable_unsafe_inline_code_and_only_allow_https_resources"><h3 id="disable_unsafe_inline_code_and_only_allow_https_resources"><a href="#disable_unsafe_inline_code_and_only_allow_https_resources">Disable unsafe inline code and only allow HTTPS resources</a></h3><div class="section-content"><p>This HTTP header sets the default policy to only allow resource loading (images, fonts, scripts, etc.) over HTTPS.
Because the <code>unsafe-inline</code> and <code>unsafe-eval</code> directives are not set, inline scripts will be blocked.</p>
<div class="code-example"><div class="example-header"><span class="language-name">http</span></div><pre class="brush: http notranslate"><code>Content-Security-Policy: default-src https:
</code></pre></div>
<p>The same restrictions can be applied using the HTML <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/meta"><code>&lt;meta&gt;</code></a> element.</p>
<div class="code-example"><div class="example-header"><span class="language-name">html</span></div><pre class="brush: html notranslate"><code>&lt;meta http-equiv="Content-Security-Policy" content="default-src https:" /&gt;
</code></pre></div></div></section><section aria-labelledby="allow_inline_code_and_https_resources_but_disable_plugins"><h3 id="allow_inline_code_and_https_resources_but_disable_plugins"><a href="#allow_inline_code_and_https_resources_but_disable_plugins">Allow inline code and HTTPS resources, but disable plugins</a></h3><div class="section-content"><p>This policy could be used on a pre-existing site that uses too much inline code to fix, to ensure resources are loaded only over HTTPS and disable plugins:</p>
<div class="code-example"><div class="example-header"><span class="language-name">http</span></div><pre class="brush: http notranslate"><code>Content-Security-Policy: default-src https: 'unsafe-eval' 'unsafe-inline'; object-src 'none'
</code></pre></div></div></section><section aria-labelledby="report_but_dont_enforce_violations_when_testing"><h3 id="report_but_dont_enforce_violations_when_testing"><a href="#report_but_dont_enforce_violations_when_testing">Report but don't enforce violations when testing</a></h3><div class="section-content"><p>This example sets the same restrictions as the previous example, but using the <a href="Content-Security-Policy-Report-Only.htm"><code>Content-Security-Policy-Report-Only</code></a> header and the <a href="Content-Security-Policy/report-to.htm"><code>report-to</code></a> directive.
This approach is used during testing to report violations but not block code from executing.</p>
<p>Endpoints (URLs) to send reports to are defined using the <a href="Reporting-Endpoints.htm"><code>Reporting-Endpoints</code></a> HTTP response header.</p>
<div class="code-example"><div class="example-header"><span class="language-name">http</span></div><pre class="brush: http notranslate"><code>Reporting-Endpoints: csp-endpoint="https://example.com/csp-reports"
</code></pre></div>
<p>A particular endpoint is then selected as the report target in the CSP policy using the <a href="Content-Security-Policy/report-to.htm"><code>report-to</code></a> directive.</p>
<div class="code-example"><div class="example-header"><span class="language-name">http</span></div><pre class="brush: http notranslate"><code>Content-Security-Policy-Report-Only: default-src https:; report-uri /csp-violation-report-url/; report-to csp-endpoint
</code></pre></div>
<p>Note that the <a href="Content-Security-Policy/report-uri.htm"><code>report-uri</code></a> <abbr class="icon icon-deprecated" title="Deprecated. Not for use in new websites.">
<span class="visually-hidden">Deprecated</span>
</abbr> directive is also specified above because <code>report-to</code> is not yet broadly supported by browsers.</p>
<p>See <a href="https://developer.mozilla.org/en-US/docs/Web/Security/Practical_implementation_guides/CSP">Content Security Policy (CSP) implementation</a> for more examples.</p></div></section><h2 id="specifications"><a href="#specifications">Specifications</a></h2><table class="standard-table"><thead><tr><th scope="col">Specification</th></tr></thead><tbody><tr><td><a href="https://w3c.github.io/webappsec-csp/#csp-header">Content Security Policy Level 3<!-- --> <br><small># <!-- -->csp-header</small></a></td></tr></tbody></table><!--$--><h2 id="browser_compatibility"><a href="#browser_compatibility">Browser compatibility</a></h2><lazy-compat-table></lazy-compat-table><!--/$--><section aria-labelledby="see_also"><h2 id="see_also"><a href="#see_also">See also</a></h2><div class="section-content"><ul>
<li><a href="Content-Security-Policy-Report-Only.htm"><code>Content-Security-Policy-Report-Only</code></a></li>
<li><a href="/en-US/docs/Web/HTTP/Guides/CSP">Learn about: Content Security Policy</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Content_Security_Policy">Content Security in WebExtensions</a></li>
<li><a href="https://csp.withgoogle.com/docs/strict-csp.html" class="external" target="_blank">Adopting a strict policy</a></li>
<li><a href="https://github.com/google/csp-evaluator" class="external" target="_blank">CSP Evaluator</a> - Evaluate your
Content Security Policy</li>
</ul></div></section></article></main></div></div></div></body></html>