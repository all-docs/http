<!DOCTYPE html><html lang="en-US" prefix="og: https://ogp.me/ns#"><head><meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1"><link rel="shortcut icon" href="https://developer.mozilla.org/favicon.ico"><link rel="alternate icon" type="image/svg+xml" href="https://developer.mozilla.org/favicon.svg"><link rel="apple-touch-icon" href="https://developer.mozilla.org/apple-touch-icon.528534bba673c38049c2.png"><meta name="theme-color" content="#ffffff"><link rel="manifest" href="https://developer.mozilla.org/manifest.f42880861b394dd4dc9b.json"><link rel="search" type="application/opensearchdescription+xml" href="/opensearch.xml" title="MDN Web Docs"><title>Content-Security-Policy: script-src directive</title><link rel="alternate" title="Content-Security-Policy: Direktive `script-src`" href="https://developer.mozilla.org/de/docs/Web/HTTP/Reference/Headers/Content-Security-Policy/script-src" hreflang="de"><link rel="alternate" title="CSP : script-src" href="https://developer.mozilla.org/fr/docs/Web/HTTP/Reference/Headers/Content-Security-Policy/script-src" hreflang="fr"><link rel="alternate" title="CSP: script-src" href="https://developer.mozilla.org/ja/docs/Web/HTTP/Reference/Headers/Content-Security-Policy/script-src" hreflang="ja"><link rel="alternate" title="CSP: script-src" href="https://developer.mozilla.org/ko/docs/Web/HTTP/Reference/Headers/Content-Security-Policy/script-src" hreflang="ko"><link rel="alternate" title="Content-Security-Policy: script-src directive" href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Content-Security-Policy/script-src" hreflang="en"><link rel="preload" as="font" type="font/woff2" href="/static/media/Inter.var.c2fe3cb2b7c746f7966a.woff2" crossorigin=""><link rel="alternate" type="application/rss+xml" title="MDN Blog RSS Feed" href="https://developer.mozilla.org/en-US/blog/rss.xml"><meta name="description" content="The HTTP Content-Security-Policy (CSP) script-src directive specifies valid sources for JavaScript. This includes not only URLs loaded directly into <script> elements, but also things like inline script event handlers (onclick) and XSLT stylesheets which can trigger script execution."><meta property="og:url" content="https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Content-Security-Policy/script-src"><meta property="og:title" content="Content-Security-Policy: script-src directive - HTTP | MDN"><meta property="og:type" content="website"><meta property="og:locale" content="en_US"><meta property="og:description" content="The HTTP Content-Security-Policy (CSP) script-src directive specifies valid sources for JavaScript. This includes not only URLs loaded directly into <script> elements, but also things like inline script event handlers (onclick) and XSLT stylesheets which can trigger script execution."><meta property="og:image" content="https://developer.mozilla.org/mdn-social-share.d893525a4fb5fb1f67a2.png"><meta property="og:image:type" content="image/png"><meta property="og:image:height" content="1080"><meta property="og:image:width" content="1920"><meta property="og:image:alt" content="The MDN Web Docs logo, featuring a blue accent color, displayed on a solid black background."><meta property="og:site_name" content="MDN Web Docs"><meta name="twitter:card" content="summary_large_image"><meta name="twitter:creator" content="MozDevNet"><link rel="canonical" href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Content-Security-Policy/script-src"><style media="print">.article-actions-container,.document-toc-container,.language-menu,.main-menu-toggle,.on-github,.page-footer,.place,.sidebar,.top-banner,.top-navigation-main,ul.prev-next{display:none!important}.main-page-content,.main-page-content pre{padding:2px}.main-page-content pre{border-left-width:2px}</style></head><body><div id="root"><div class="page-wrapper  category-http document-page"><div class="main-wrapper"><main id="content" class="main-content  "><article class="main-page-content" lang="en-US"><header><h1>Content-Security-Policy: script-src directive</h1><details class="baseline-indicator high"><summary><span class="indicator" role="img" aria-label="Baseline Check"></span><div class="status-title">Baseline<!-- --> <span class="not-bold">Widely available</span> *</div><div class="browsers"><span class="engine" title="Supported in Chrome and Edge"><span class="browser chrome supported" role="img" aria-label="Chrome check"></span><span class="browser edge supported" role="img" aria-label="Edge check"></span></span><span class="engine" title="Supported in Firefox"><span class="browser firefox supported" role="img" aria-label="Firefox check"></span></span><span class="engine" title="Supported in Safari"><span class="browser safari supported" role="img" aria-label="Safari check"></span></span></div><span class="icon icon-chevron "></span></summary><div class="extra"><p>This feature is well established and works across many devices and browser versions. Itâ€™s been available across browsers since<!-- --> <!-- -->August 2016<!-- -->.</p><p>* Some parts of this feature may have varying levels of support.</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Glossary/Baseline/Compatibility" data-glean="baseline_link_learn_more" target="_blank" class="learn-more">Learn more</a></li><li><a href="#browser_compatibility" data-glean="baseline_link_bcd_table">See full compatibility</a></li><li><a href="https://survey.alchemer.com/s3/7634825/MDN-baseline-feedback?page=%2Fen-US%2Fdocs%2FWeb%2FHTTP%2FReference%2FHeaders%2FContent-Security-Policy%2Fscript-src&amp;level=high" data-glean="baseline_link_feedback" class="feedback-link" target="_blank" rel="noreferrer">Report feedback</a></li></ul></div></details></header><div class="section-content"><p>The HTTP <a href="/en-US/docs/Web/HTTP/Reference/Headers/Content-Security-Policy"><code>Content-Security-Policy</code></a> (CSP) <strong><code>script-src</code></strong> directive specifies valid sources for JavaScript. This includes not only URLs loaded directly into <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/script"><code>&lt;script&gt;</code></a> elements, but also things like inline script event handlers (<code>onclick</code>) and <a href="https://developer.mozilla.org/en-US/docs/Web/XML/XSLT">XSLT stylesheets</a> which can trigger script execution.</p>
<figure class="table-container"><table class="properties">
  <tbody>
    <tr>
      <th scope="row">CSP version</th>
      <td>1</td>
    </tr>
    <tr>
      <th scope="row">Directive type</th>
      <td><a href="https://developer.mozilla.org/en-US/docs/Glossary/Fetch_directive">Fetch directive</a></td>
    </tr>
    <tr>
      <th scope="row"><a href="default-src.htm"><code>default-src</code></a> fallback</th>
      <td>
        Yes. If this directive is absent, the user agent will look for the
        <code>default-src</code> directive.
      </td>
    </tr>
  </tbody>
</table></figure></div><section aria-labelledby="syntax"><h2 id="syntax"><a href="#syntax">Syntax</a></h2><div class="section-content"><div class="code-example"><div class="example-header"><span class="language-name">http</span></div><pre class="brush: http notranslate"><code>Content-Security-Policy: script-src 'none';
Content-Security-Policy: script-src &lt;source-expression-list&gt;;
</code></pre></div>
<p>This directive may have one of the following values:</p>
<dl>
<dt id="none"><a href="#none"><code>'none'</code></a></dt>
<dd>
<p>No resources of this type may be loaded. The single quotes are mandatory.</p>
</dd>
<dt id="source-expression-list"><a href="#source-expression-list"><code>&lt;source-expression-list&gt;</code></a></dt>
<dd>
<p>A space-separated list of <em>source expression</em> values. Resources of this type may be loaded if they match any of the given source expressions. For this directive, any of the source expression values listed in <a href="/en-US/docs/Web/HTTP/Reference/Headers/Content-Security-Policy#fetch_directive_syntax">Fetch directive syntax</a> are applicable.</p>
</dd>
</dl></div></section><section aria-labelledby="examples"><h2 id="examples"><a href="#examples">Examples</a></h2><div class="section-content"></div></section><section aria-labelledby="allowlisting_resources_from_trusted_domains"><h3 id="allowlisting_resources_from_trusted_domains"><a href="#allowlisting_resources_from_trusted_domains">Allowlisting resources from trusted domains</a></h3><div class="section-content"><p>Given this CSP header that only allows scripts from <code>https://example.com</code>:</p>
<div class="code-example"><div class="example-header"><span class="language-name">http</span></div><pre class="brush: http notranslate"><code>Content-Security-Policy: script-src https://example.com/
</code></pre></div>
<p>the following script is blocked and won't be loaded or executed:</p>
<div class="code-example"><div class="example-header"><span class="language-name">html</span></div><pre class="brush: html notranslate"><code>&lt;script src="https://not-example.com/js/library.js"&gt;&lt;/script&gt;
</code></pre></div>
<p>Note that inline event handlers are blocked as well:</p>
<div class="code-example"><div class="example-header"><span class="language-name">html</span></div><pre class="brush: html notranslate"><code>&lt;button id="btn" onclick="doSomething()"&gt;&lt;/button&gt;
</code></pre></div>
<p>You should replace them with <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener" title="addEventListener"><code>addEventListener</code></a> calls:</p>
<div class="code-example"><div class="example-header"><span class="language-name">js</span></div><pre class="brush: js notranslate"><code>document.getElementById("btn").addEventListener("click", doSomething);
</code></pre></div>
<p>If you cannot replace inline event handlers, you can use the <code>'unsafe-hashes'</code> source expression to allow them.
See <a href="#unsafe_hashes">Unsafe hashes</a> for more information.</p></div></section><section aria-labelledby="allowlisting_external_scripts_using_hashes"><h3 id="allowlisting_external_scripts_using_hashes"><a href="#allowlisting_external_scripts_using_hashes">Allowlisting external scripts using hashes</a></h3><div class="section-content"><p>Allowing trusted domains, as shown in the section above, is a broad-brushed approach for specifying the locations from which code can safely be loaded.
This is a pragmatic approach, in particular when your site uses many resources and you have confidence that the trusted site will not be compromised.</p>
<p>An alternative method is to specify allowed scripts using file hashes.
Using this approach an external file in a <code>&lt;script&gt;</code> element can only be loaded and executed if all the valid hash values in its <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/script#integrity"><code>integrity</code></a> attribute match the allowed values in the CSP header.
The <a href="https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity">Subresource integrity</a> feature additionally checks that the downloaded file has the indicated hash value, and therefore has not been modified.
This is safer than trusting a domain, because files will only be used if they are unmodified, even if loaded from a compromised site.
It is however more granular, and requires that hash values are updated in CSP and script elements whenever the associated scripts are changed.</p>
<p>The CSP header below demonstrates the approach.
It allows scripts for which the SHA384 hash is <code>oqVuAfXRKap7fdgcCY5uykM6+R9GqQ8K/uxy9rx7HNQlGYl1kPzQho1wx4JwY8wC</code> or the SHA256 hash is <code>fictional_value</code>.</p>
<div class="code-example"><div class="example-header"><span class="language-name">http</span></div><pre class="brush: http notranslate"><code>Content-Security-Policy: script-src 'sha384-oqVuAfXRKap7fdgcCY5uykM6+R9GqQ8K/uxy9rx7HNQlGYl1kPzQho1wx4JwY8wC' 'sha256-fictional_value'
</code></pre></div>
<p>The <code>example-framework.js</code> script below should load because the hash value in its <code>integrity</code> attribute is also present in the CSP (provided the file actually does have that hash once downloaded!)</p>
<div class="code-example"><div class="example-header"><span class="language-name">html</span></div><pre class="brush: html notranslate"><code>&lt;script
  src="https://example.com/example-framework.js"
  integrity="sha384-oqVuAfXRKap7fdgcCY5uykM6+R9GqQ8K/uxy9rx7HNQlGYl1kPzQho1wx4JwY8wC"
  crossorigin="anonymous"&gt;&lt;/script&gt;
</code></pre></div>
<p>The <code>integrity</code> attribute can have multiple values, each providing a hash for the file calculated using a different algorithm.
In order for an external script to be loaded, CSP requires that <em>all</em> valid hash values in the attribute must also be in the CSP <code>script-src</code> declaration.
Therefore the script below would not load, because the second hash is not present in the CSP header above.</p>
<div class="code-example"><div class="example-header"><span class="language-name">html</span></div><pre class="brush: html notranslate"><code>&lt;script
  src="https://example.com/example-framework.js"
  integrity="sha384-oqVuAfXRKap7fdgcCY5uykM6+R9GqQ8K/uxy9rx7HNQlGYl1kPzQho1wx4JwY8wC sha256-not-in-csp"
  crossorigin="anonymous"&gt;&lt;/script&gt;
</code></pre></div>
<p>This rule only applies to <em>valid</em> hash values.
Values that are not recognized as hashes by the browser are ignored, so the following script should load:</p>
<div class="code-example"><div class="example-header"><span class="language-name">html</span></div><pre class="brush: html notranslate"><code>&lt;script
  src="https://example.com/example-framework.js"
  integrity="invalid-or-unsupported-hash sha384-oqVuAfXRKap7fdgcCY5uykM6+R9GqQ8K/uxy9rx7HNQlGYl1kPzQho1wx4JwY8wC"
  crossorigin="anonymous"&gt;&lt;/script&gt;
</code></pre></div>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity">Subresource integrity</a> contains more information about calculating hashes and using the <code>integrity</code> attribute.</p></div></section><section aria-labelledby="unsafe_inline_script"><h3 id="unsafe_inline_script"><a href="#unsafe_inline_script">Unsafe inline script</a></h3><div class="section-content"><div class="notecard note">
<p><strong>Note:</strong>
Disallowing inline styles and inline scripts is one of the biggest security wins CSP provides.
If you absolutely have to use them, there are a few mechanisms that will allow them.
Hashes apply to inline scripts and styles, but not event handlers.
See <a href="#unsafe_hashes">Unsafe hashes</a> for more information.</p>
</div>
<p>To allow inline scripts and styles, <code>'unsafe-inline'</code>, a nonce-source or a hash-source that matches the inline block can be specified.
The following Content Security Policy will allow all inline <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/script"><code>&lt;script&gt;</code></a> elements:</p>
<div class="code-example"><div class="example-header"><span class="language-name">http</span></div><pre class="brush: http notranslate"><code>Content-Security-Policy: script-src 'unsafe-inline';
</code></pre></div>
<p>The following <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/script"><code>&lt;script&gt;</code></a> element will be allowed by the policy:</p>
<div class="code-example"><div class="example-header"><span class="language-name">html</span></div><pre class="brush: html notranslate"><code>&lt;script&gt;
  const inline = 1;
  // â€¦
&lt;/script&gt;
</code></pre></div>
<p>Allowing all inline scripts is considered a security risk, so it's recommended to use a nonce-source or a hash-source instead.
To allow inline scripts and styles with a nonce-source, you need to generate a random nonce value (using a cryptographically secure random token generator) and include it in the policy.
It is important to note, this nonce value needs to be dynamically generated as it has to be unique for each HTTP request:</p>
<div class="code-example"><div class="example-header"><span class="language-name">http</span></div><pre class="brush: http notranslate"><code>Content-Security-Policy: script-src 'nonce-2726c7f26c'
</code></pre></div>
<p>Then, you need to include the same nonce in the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/script"><code>&lt;script&gt;</code></a> element:</p>
<div class="code-example"><div class="example-header"><span class="language-name">html</span></div><pre class="brush: html notranslate"><code>&lt;script nonce="2726c7f26c"&gt;
  const inline = 1;
  // â€¦
&lt;/script&gt;
</code></pre></div>
<p>Alternatively, you can create hashes from your inline scripts. CSP supports sha256, sha384 and sha512.</p>
<div class="code-example"><div class="example-header"><span class="language-name">http</span></div><pre class="brush: http notranslate"><code>Content-Security-Policy: script-src 'sha256-B2yPHKaXnvFWtRChIbabYmUBFZdVfKKXHbWtWidDVF8='
</code></pre></div>
<p>When generating the hash, don't include the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/script"><code>&lt;script&gt;</code></a> tags and note that capitalization and whitespace matter, including leading or trailing whitespace.</p>
<div class="code-example"><div class="example-header"><span class="language-name">html</span></div><pre class="brush: html notranslate"><code>&lt;script&gt;
  const inline = 1;
&lt;/script&gt;
</code></pre></div></div></section><section aria-labelledby="unsafe_hashes"><h3 id="unsafe_hashes"><a href="#unsafe_hashes">Unsafe hashes</a></h3><div class="section-content"><p>Policies for inline resources with hashes like <code>script-src 'sha256-{HASHED_INLINE_SCRIPT}'</code> allow scripts and styles by their hash, but not event handlers:</p>
<div class="code-example"><div class="example-header"><span class="language-name">html</span></div><pre class="brush: html notranslate"><code>&lt;!-- Allowed by CSP: script-src 'sha256-{HASHED_INLINE_SCRIPT}' --&gt;
&lt;script&gt;
  const inline = 1;
&lt;/script&gt;

&lt;!-- CSP: script-src 'sha256-{HASHED_EVENT_HANDLER}'
      will not allow this event handler --&gt;
&lt;button onclick="myScript()"&gt;Submit&lt;/button&gt;
</code></pre></div>
<p>Instead of allowing <code>'unsafe-inline'</code>, you can use the <code>'unsafe-hashes'</code> source expression if code can't be updated to equivalent <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener" title="addEventListener"><code>addEventListener</code></a> calls.
Given a HTML page that includes the following inline event handler:</p>
<div class="code-example"><div class="example-header"><span class="language-name">html</span></div><pre class="brush: html notranslate"><code>&lt;!-- I want to use addEventListener, but I can't :( --&gt;
&lt;button onclick="myScript()"&gt;Submit&lt;/button&gt;
</code></pre></div>
<p>The following CSP header will allow the script to execute:</p>
<div class="code-example"><div class="example-header"><span class="language-name">http</span></div><pre class="brush: http notranslate"><code>Content-Security-Policy:  script-src 'unsafe-hashes' 'sha256-{HASHED_EVENT_HANDLER}'
</code></pre></div></div></section><section aria-labelledby="unsafe_eval_expressions"><h3 id="unsafe_eval_expressions"><a href="#unsafe_eval_expressions">Unsafe eval expressions</a></h3><div class="section-content"><p>The <code>'unsafe-eval'</code> source expression controls several script execution methods that create code from strings.
If a page has a CSP header and <code>'unsafe-eval'</code> isn't specified with the <code>script-src</code> directive, the following methods are blocked and won't have any effect:</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval"><code>eval()</code></a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function"><code>Function()</code></a></li>
<li>
<p>When passing a string literal like to methods like: <code>setTimeout("alert(\"Hello World!\");", 500);</code></p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout" title="setTimeout()"><code>setTimeout()</code></a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval" title="setInterval()"><code>setInterval()</code></a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/setImmediate" title="setImmediate()"><code>setImmediate()</code></a></li>
</ul>
</li>
<li>
<p><code>window.execScript()</code> <abbr class="icon icon-nonstandard" title="Non-standard. Check cross-browser support before using.">
<span class="visually-hidden">Non-standard</span>
</abbr> (IE &lt; 11 only)</p>
</li>
</ul></div></section><section aria-labelledby="unsafe_webassembly_execution"><h3 id="unsafe_webassembly_execution"><a href="#unsafe_webassembly_execution">Unsafe WebAssembly execution</a></h3><div class="section-content"><p>The <code>'wasm-unsafe-eval'</code> source expression controls WebAssembly execution.
If a page has a CSP header and <code>'wasm-unsafe-eval'</code> isn't specified in the <code>script-src</code> directive, WebAssembly is blocked from loading and executing on the page.</p>
<p>The <code>'wasm-unsafe-eval'</code> source expression is more specific than <code>'unsafe-eval'</code> which permits both compilation (and instantiation) of WebAssembly and, for example, the use of the <code>eval</code> operation in JavaScript.
If the <code>'unsafe-eval'</code> source keyword is used, then this overrides any occurrence of <code>'wasm-unsafe-eval'</code> in the CSP policy.</p>
<div class="code-example"><div class="example-header"><span class="language-name">http</span></div><pre class="brush: http notranslate"><code>Content-Security-Policy: script-src 'wasm-unsafe-eval'
</code></pre></div></div></section><section aria-labelledby="strict-dynamic"><h3 id="strict-dynamic"><a href="#strict-dynamic">strict-dynamic</a></h3><div class="section-content"><p>The <code>'strict-dynamic'</code> source expression specifies that the trust explicitly given to a script present in the markup, by accompanying it with a nonce or a hash, shall be propagated to all the scripts loaded by that root script. At the same time, any allowlist or source expressions such as <code>'self'</code> or <code>'unsafe-inline'</code> will be ignored.</p>
<p>For example, a policy such as <code>script-src 'strict-dynamic' 'nonce-R4nd0m' https://allowlisted.example.com/</code> would allow loading of a root script with <code>&lt;script nonce="R4nd0m" src="https://example.com/loader.js"&gt;</code> and propagate that trust to any script loaded by <code>loader.js</code>, but disallow loading scripts from <code>https://allowlisted.example.com/</code> unless accompanied by a nonce or loaded from a trusted script.</p>
<div class="code-example"><div class="example-header"><span class="language-name">http</span></div><pre class="brush: http notranslate"><code>Content-Security-Policy: script-src 'strict-dynamic' 'nonce-someNonce'
</code></pre></div>
<p>Or:</p>
<div class="code-example"><div class="example-header"><span class="language-name">http</span></div><pre class="brush: http notranslate"><code>Content-Security-Policy: script-src 'strict-dynamic' 'sha256-base64EncodedHash'
</code></pre></div>
<p>It is possible to deploy <code>strict-dynamic</code> in a backwards compatible way, without requiring user-agent sniffing.
The policy:</p>
<div class="code-example"><div class="example-header"><span class="language-name">http</span></div><pre class="brush: http notranslate"><code>Content-Security-Policy: script-src 'unsafe-inline' https: 'nonce-abcdefg' 'strict-dynamic'
</code></pre></div>
<p>will act like <code>'unsafe-inline' https:</code> in browsers that support CSP1, <code>https: 'nonce-abcdefg'</code> in browsers that support CSP2, and <code>'nonce-abcdefg' 'strict-dynamic'</code> in browsers that support CSP3.</p></div></section><section aria-labelledby="allowing_speculation_rules"><h3 id="allowing_speculation_rules"><a href="#allowing_speculation_rules">Allowing speculation rules</a></h3><div class="section-content"><p>To include <a href="https://developer.mozilla.org/en-US/docs/Web/API/Speculation_Rules_API">speculation rules</a> in a script element (see also <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/script/type/speculationrules"><code>&lt;script type="speculationrules"&gt;</code></a>), you need to use the <code>script-src</code> directive with one of the <code>'inline-speculation-rules'</code> source, a hash-source, or nonce-source. For example:</p>
<div class="code-example"><div class="example-header"><span class="language-name">http</span></div><pre class="brush: http notranslate"><code>Content-Security-Policy: script-src 'inline-speculation-rules'
</code></pre></div></div></section><h2 id="specifications"><a href="#specifications">Specifications</a></h2><table class="standard-table"><thead><tr><th scope="col">Specification</th></tr></thead><tbody><tr><td><a href="https://w3c.github.io/webappsec-csp/#directive-script-src">Content Security Policy Level 3<!-- --> <br><small># <!-- -->directive-script-src</small></a></td></tr></tbody></table><!--$--><h2 id="browser_compatibility"><a href="#browser_compatibility">Browser compatibility</a></h2><lazy-compat-table></lazy-compat-table><!--/$--><section aria-labelledby="see_also"><h2 id="see_also"><a href="#see_also">See also</a></h2><div class="section-content"><ul>
<li><a href="/en-US/docs/Web/HTTP/Reference/Headers/Content-Security-Policy"><code>Content-Security-Policy</code></a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/script"><code>&lt;script&gt;</code></a></li>
<li><a href="script-src-elem.htm"><code>script-src-elem</code></a></li>
<li><a href="script-src-attr.htm"><code>script-src-attr</code></a></li>
</ul></div></section></article></main></div></div></div></body></html>