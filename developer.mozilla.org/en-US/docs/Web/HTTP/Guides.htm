<!DOCTYPE html><html lang="en-US" prefix="og: https://ogp.me/ns#"><head><meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1"><link rel="shortcut icon" href="https://developer.mozilla.org/favicon.ico"><link rel="alternate icon" type="image/svg+xml" href="https://developer.mozilla.org/favicon.svg"><link rel="apple-touch-icon" href="https://developer.mozilla.org/apple-touch-icon.528534bba673c38049c2.png"><meta name="theme-color" content="#ffffff"><link rel="manifest" href="https://developer.mozilla.org/manifest.f42880861b394dd4dc9b.json"><link rel="search" type="application/opensearchdescription+xml" href="/opensearch.xml" title="MDN Web Docs"><title>HTTP guides</title><link rel="alternate" title="HTTP-Leitfäden" href="https://developer.mozilla.org/de/docs/Web/HTTP/Guides" hreflang="de"><link rel="alternate" title="HTTP ガイド" href="https://developer.mozilla.org/ja/docs/Web/HTTP/Guides" hreflang="ja"><link rel="alternate" title="HTTP 指南" href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Guides" hreflang="zh"><link rel="alternate" title="HTTP guides" href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides" hreflang="en"><link rel="preload" as="font" type="font/woff2" href="/static/media/Inter.var.c2fe3cb2b7c746f7966a.woff2" crossorigin=""><link rel="alternate" type="application/rss+xml" title="MDN Blog RSS Feed" href="https://developer.mozilla.org/en-US/blog/rss.xml"><meta name="description" content="This page lists guides for HTTP.
They're intended to help you understand what kinds of things are possible using the HTTP protocol."><meta property="og:url" content="https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides"><meta property="og:title" content="HTTP guides - HTTP | MDN"><meta property="og:type" content="website"><meta property="og:locale" content="en_US"><meta property="og:description" content="This page lists guides for HTTP.
They're intended to help you understand what kinds of things are possible using the HTTP protocol."><meta property="og:image" content="https://developer.mozilla.org/mdn-social-share.d893525a4fb5fb1f67a2.png"><meta property="og:image:type" content="image/png"><meta property="og:image:height" content="1080"><meta property="og:image:width" content="1920"><meta property="og:image:alt" content="The MDN Web Docs logo, featuring a blue accent color, displayed on a solid black background."><meta property="og:site_name" content="MDN Web Docs"><meta name="twitter:card" content="summary_large_image"><meta name="twitter:creator" content="MozDevNet"><link rel="canonical" href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides"><style media="print">.article-actions-container,.document-toc-container,.language-menu,.main-menu-toggle,.on-github,.page-footer,.place,.sidebar,.top-banner,.top-navigation-main,ul.prev-next{display:none!important}.main-page-content,.main-page-content pre{padding:2px}.main-page-content pre{border-left-width:2px}</style></head><body><div id="root"><div class="page-wrapper  category-http document-page"><div class="main-wrapper"><main id="content" class="main-content  "><article class="main-page-content" lang="en-US"><header><h1>HTTP guides</h1></header><div class="section-content"><p>This page lists guides for HTTP.
They're intended to help you understand what kinds of things are possible using the HTTP protocol.</p>
<dl><dt class="landingPageList" id="a_typical_http_session"><a href="Guides/Session.htm">A typical HTTP session</a></dt><dd class="landingPageList"><p>In client-server protocols, like HTTP, sessions consist of three phases:</p></dd><dt class="landingPageList" id="browser_detection_using_the_user_agent_string_ua_sniffing"><a href="Guides/Browser_detection_using_the_user_agent.htm">Browser detection using the user agent string (UA sniffing)</a></dt><dd class="landingPageList"><p>Along with every request to a server, browsers include a <code>User-Agent</code> HTTP header with a value called a user agent (UA) string.
This string is intended to identify the browser, its version number, and its host operating system.</p></dd><dt class="landingPageList" id="compression_dictionary_transport"><a href="Guides/Compression_dictionary_transport.htm">Compression Dictionary Transport</a></dt><dd class="landingPageList"><p><strong>Compression Dictionary Transport</strong> is a way of using a shared compression dictionary to dramatically reduce the transport size of HTTP responses.</p></dd><dt class="landingPageList" id="compression_in_http"><a href="Guides/Compression.htm">Compression in HTTP</a></dt><dd class="landingPageList"><p><strong>Compression</strong> is an important way to increase the performance of a website. For some documents, size reduction of up to 70% lowers the bandwidth capacity needs. Over the years, algorithms also got more efficient, and new ones are supported by clients and servers.</p></dd><dt class="landingPageList" id="connection_management_in_http1.x"><a href="Guides/Connection_management_in_HTTP_1.htm">Connection management in HTTP/1.x</a></dt><dd class="landingPageList"><p>Connection management is a key topic in HTTP: opening and maintaining connections largely impacts the performance of websites and Web applications. In HTTP/1.x, there are several models: <em>short-lived connections</em>, <em>persistent connections</em>, and <em>HTTP pipelining.</em></p></dd><dt class="landingPageList" id="content_negotiation"><a href="Guides/Content_negotiation.htm">Content negotiation</a></dt><dd class="landingPageList"><p>In <a href="https://developer.mozilla.org/en-US/docs/Glossary/HTTP">HTTP</a>, <strong><em>content negotiation</em></strong> is the mechanism that is used for serving different representations of a resource to the same URI to help the user agent specify which representation is best suited for the user (for example, which document language, which image format, or which content encoding).</p></dd><dt class="landingPageList" id="content_security_policy_csp"><a href="Guides/CSP.htm">Content Security Policy (CSP)</a></dt><dd class="landingPageList"><p><strong>Content Security Policy</strong> (CSP) is a feature that helps to prevent or minimize the risk of certain types of security threats. It consists of a series of instructions from a website to a browser, which instruct the browser to place restrictions on the things that the code comprising the site is allowed to do.</p></dd><dt class="landingPageList" id="cross-origin_resource_policy_corp"><a href="Guides/Cross-Origin_Resource_Policy.htm">Cross-Origin Resource Policy (CORP)</a></dt><dd class="landingPageList"><p><strong>Cross-Origin Resource Policy</strong> is a policy set by the <a href="Reference/Headers/Cross-Origin-Resource-Policy.htm"><code>Cross-Origin-Resource-Policy</code> HTTP header</a> that lets websites and applications opt in to protection against certain requests from other origins (such as those issued with elements like <code>&lt;script&gt;</code> and <code>&lt;img&gt;</code>), to mitigate speculative side-channel attacks, like <a href="https://en.wikipedia.org/wiki/Spectre_(security_vulnerability)" class="external" target="_blank">Spectre</a>, as well as Cross-Site Script Inclusion attacks.</p></dd><dt class="landingPageList" id="cross-origin_resource_sharing_cors"><a href="Guides/CORS.htm">Cross-Origin Resource Sharing (CORS)</a></dt><dd class="landingPageList"><p><strong>Cross-Origin Resource Sharing</strong> (CORS) is an HTTP-header based mechanism that allows a server to indicate any origins (domain, scheme, or port) other than its own from which a browser should permit loading resources. CORS also relies on a mechanism by which browsers make a "preflight" request to the server hosting the cross-origin resource, in order to check that the server will permit the actual request. In that preflight, the browser sends headers that indicate the HTTP method and headers that will be used in the actual request.</p></dd><dt class="landingPageList" id="evolution_of_http"><a href="Guides/Evolution_of_HTTP.htm">Evolution of HTTP</a></dt><dd class="landingPageList"><p><strong>HTTP</strong> (HyperText Transfer Protocol) is the underlying protocol of the World Wide Web. Developed by Tim Berners-Lee and his team between 1989-1991, HTTP has gone through many changes that have helped maintain its simplicity while shaping its flexibility. Keep reading to learn how HTTP evolved from a protocol designed to exchange files in a semitrusted laboratory environment into a modern internet maze that carries images and videos in high resolution and 3D.</p></dd><dt class="landingPageList" id="http_authentication"><a href="Guides/Authentication.htm">HTTP authentication</a></dt><dd class="landingPageList"><p>HTTP provides a general framework for access control and authentication.
This page is an introduction to the HTTP framework for authentication, and shows how to restrict access to your server using the HTTP "Basic" scheme.</p></dd><dt class="landingPageList" id="http_caching"><a href="Guides/Caching.htm">HTTP caching</a></dt><dd class="landingPageList"><p>The HTTP cache stores a response associated with a request and reuses the stored response for subsequent requests.</p></dd><dt class="landingPageList" id="http_client_hints"><a href="Guides/Client_hints.htm">HTTP Client hints</a></dt><dd class="landingPageList"><p><strong>Client hints</strong> are a set of <a href="Reference/Headers.htm">HTTP request header</a> fields that a server can proactively request from a client to get information about the device, network, user, and user-agent-specific preferences.
The server can determine which resources to send, based on the information that the client chooses to provide.</p></dd><dt class="landingPageList" id="http_conditional_requests"><a href="Guides/Conditional_requests.htm">HTTP conditional requests</a></dt><dd class="landingPageList"><p>HTTP has a concept of <em>conditional requests</em>, where the result, and even the success of a request, can be controlled by comparing the affected resources with a <em>validator</em>.
These requests are useful for validating cached content, ensuring that it is only fetched if it differs from the copy that is already available to the browser.
Conditional requests are also useful for ensuring the integrity of a document when resuming a download, or preventing lost updates when uploading or modifying a document on the server.</p></dd><dt class="landingPageList" id="http_messages"><a href="Guides/Messages.htm">HTTP messages</a></dt><dd class="landingPageList"><p><strong>HTTP messages</strong> are the mechanism used to exchange data between a server and a client in the HTTP protocol.
There are two types of messages: <strong>requests</strong> sent by the client to trigger an action on the server, and <strong>responses</strong>, the answer that the server sends in response to a request.</p></dd><dt class="landingPageList" id="http_range_requests"><a href="Guides/Range_requests.htm">HTTP range requests</a></dt><dd class="landingPageList"><p>An HTTP <code>Range</code> request asks the server to send parts of a resource back to a client.
Range requests are useful for various clients, including media players that support random access, data tools that require only part of a large file, and download managers that let users pause and resume a download.</p></dd><dt class="landingPageList" id="media_types_mime_types"><a href="Guides/MIME_types.htm">Media types (MIME types)</a></dt><dd class="landingPageList"><p>A <strong>media type</strong> (formerly known as a <strong>Multipurpose Internet Mail Extensions or MIME type</strong>) indicates the nature and format of a document, file, or assortment of bytes.
MIME types are defined and standardized in IETF's <code>6838</code>.</p></dd><dt class="landingPageList" id="network_error_logging_nel"><a href="Guides/Network_Error_Logging.htm">Network Error Logging (NEL)</a></dt><dd class="landingPageList"><p>Network Error Logging is a mechanism that can be configured via the <code>NEL</code> HTTP <em><a href="https://developer.mozilla.org/en-US/docs/Glossary/Response_header">response header</a></em>. This experimental header allows websites and applications to opt-in to receive reports about failed (and, if desired, successful) network fetches from supporting browsers.</p></dd><dt class="landingPageList" id="overview_of_http"><a href="Guides/Overview.htm">Overview of HTTP</a></dt><dd class="landingPageList"><p><strong>HTTP</strong> is a protocol for fetching resources such as HTML documents.
It is the foundation of any data exchange on the Web and it is a client-server protocol, which means requests are initiated by the recipient, usually the Web browser.
A complete document is typically constructed from resources such as text content, layout instructions, images, videos, scripts, and more.</p></dd><dt class="landingPageList" id="permissions_policy"><a href="Guides/Permissions_Policy.htm">Permissions Policy</a></dt><dd class="landingPageList"><p><strong>Permissions Policy</strong> provides mechanisms for web developers to explicitly declare what functionality can and cannot be used on a website. You define a set of "policies" that restrict what APIs the site's code can access or modify the browser's default behavior for certain features. This allows you to enforce best practices, even as the codebase evolves — as well as more safely compose third-party content.</p></dd><dt class="landingPageList" id="protocol_upgrade_mechanism"><a href="Guides/Protocol_upgrade_mechanism.htm">Protocol upgrade mechanism</a></dt><dd class="landingPageList"><p>The <a href="/en-US/docs/Web/HTTP">HTTP/1.1 protocol</a> provides a special mechanism that can be used to upgrade an already established connection to a different protocol, using the <code>Upgrade</code> header field.</p></dd><dt class="landingPageList" id="proxy_servers_and_tunneling"><a href="Guides/Proxy_servers_and_tunneling.htm">Proxy servers and tunneling</a></dt><dd class="landingPageList"><p>When navigating through different networks of the Internet, proxy servers and HTTP tunnels are facilitating access to content on the World Wide Web. A proxy can be on the user's local computer, or anywhere between the user's computer and a destination server on the Internet. This page outlines some basics about proxies and introduces a few configuration options.</p></dd><dt class="landingPageList" id="redirections_in_http"><a href="Guides/Redirections.htm">Redirections in HTTP</a></dt><dd class="landingPageList"><p><strong>URL redirection</strong>, also known as <em>URL forwarding</em>, is a technique to give more than one URL address to a page, a form, a whole website, or a web application. HTTP has a special kind of response, called a <strong><em>HTTP redirect</em></strong>, for this operation.</p></dd><dt class="landingPageList" id="using_http_cookies"><a href="Guides/Cookies.htm">Using HTTP cookies</a></dt><dd class="landingPageList"><p>A <strong>cookie</strong> (also known as a web cookie or browser cookie) is a small piece of data a server sends to a user's web browser. The browser may store cookies, create new cookies, modify existing ones, and send them back to the same server with later requests. Cookies enable web applications to store limited amounts of data and remember state information; by default the HTTP protocol is <a href="Guides/Overview.htm#http_is_stateless_but_not_sessionless">stateless</a>.</p></dd></dl></div></article></main></div></div></div></body></html>